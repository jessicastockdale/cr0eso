// Generated by rstantools.  Do not edit by hand.

/*
    cr0eso is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    cr0eso is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with cr0eso.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_hierarchical_SEIR_incidence_model_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_hierarchical_SEIR_incidence_model");
    reader.add_event(291, 289, "end", "model_hierarchical_SEIR_incidence_model");
    return reader;
}
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type>
SEI(const T0__& t,
        const std::vector<T1__>& y,
        const std::vector<T2__>& params,
        const std::vector<T3__>& x_r,
        const std::vector<int>& x_i, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 13;
        local_scalar_t__ S(DUMMY_VAR__);
        (void) S;  // dummy to suppress unused var warning
        stan::math::initialize(S, DUMMY_VAR__);
        stan::math::fill(S, DUMMY_VAR__);
        stan::math::assign(S,get_base1(y, 1, "y", 1));
        current_statement_begin__ = 14;
        local_scalar_t__ E(DUMMY_VAR__);
        (void) E;  // dummy to suppress unused var warning
        stan::math::initialize(E, DUMMY_VAR__);
        stan::math::fill(E, DUMMY_VAR__);
        stan::math::assign(E,get_base1(y, 2, "y", 1));
        current_statement_begin__ = 15;
        local_scalar_t__ I(DUMMY_VAR__);
        (void) I;  // dummy to suppress unused var warning
        stan::math::initialize(I, DUMMY_VAR__);
        stan::math::fill(I, DUMMY_VAR__);
        stan::math::assign(I,get_base1(y, 3, "y", 1));
        current_statement_begin__ = 16;
        local_scalar_t__ R(DUMMY_VAR__);
        (void) R;  // dummy to suppress unused var warning
        stan::math::initialize(R, DUMMY_VAR__);
        stan::math::fill(R, DUMMY_VAR__);
        stan::math::assign(R,get_base1(y, 4, "y", 1));
        current_statement_begin__ = 19;
        local_scalar_t__ r0(DUMMY_VAR__);
        (void) r0;  // dummy to suppress unused var warning
        stan::math::initialize(r0, DUMMY_VAR__);
        stan::math::fill(r0, DUMMY_VAR__);
        stan::math::assign(r0,get_base1(params, 1, "params", 1));
        current_statement_begin__ = 20;
        local_scalar_t__ sigma(DUMMY_VAR__);
        (void) sigma;  // dummy to suppress unused var warning
        stan::math::initialize(sigma, DUMMY_VAR__);
        stan::math::fill(sigma, DUMMY_VAR__);
        stan::math::assign(sigma,get_base1(params, 2, "params", 1));
        current_statement_begin__ = 21;
        local_scalar_t__ gamma(DUMMY_VAR__);
        (void) gamma;  // dummy to suppress unused var warning
        stan::math::initialize(gamma, DUMMY_VAR__);
        stan::math::fill(gamma, DUMMY_VAR__);
        stan::math::assign(gamma,get_base1(params, 3, "params", 1));
        current_statement_begin__ = 22;
        local_scalar_t__ n(DUMMY_VAR__);
        (void) n;  // dummy to suppress unused var warning
        stan::math::initialize(n, DUMMY_VAR__);
        stan::math::fill(n, DUMMY_VAR__);
        stan::math::assign(n,get_base1(params, 4, "params", 1));
        current_statement_begin__ = 23;
        local_scalar_t__ tau(DUMMY_VAR__);
        (void) tau;  // dummy to suppress unused var warning
        stan::math::initialize(tau, DUMMY_VAR__);
        stan::math::fill(tau, DUMMY_VAR__);
        stan::math::assign(tau,get_base1(params, 5, "params", 1));
        current_statement_begin__ = 24;
        local_scalar_t__ zeta(DUMMY_VAR__);
        (void) zeta;  // dummy to suppress unused var warning
        stan::math::initialize(zeta, DUMMY_VAR__);
        stan::math::fill(zeta, DUMMY_VAR__);
        stan::math::assign(zeta,get_base1(params, 6, "params", 1));
        current_statement_begin__ = 26;
        int intervention_switch(0);
        (void) intervention_switch;  // dummy to suppress unused var warning
        stan::math::fill(intervention_switch, std::numeric_limits<int>::min());
        stan::math::assign(intervention_switch,get_base1(x_i, 1, "x_i", 1));
        current_statement_begin__ = 29;
        local_scalar_t__ r(DUMMY_VAR__);
        (void) r;  // dummy to suppress unused var warning
        stan::math::initialize(r, DUMMY_VAR__);
        stan::math::fill(r, DUMMY_VAR__);
        current_statement_begin__ = 31;
        validate_non_negative_index("dydt", "5", 5);
        std::vector<local_scalar_t__  > dydt(5, local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(dydt, DUMMY_VAR__);
        stan::math::fill(dydt, DUMMY_VAR__);
        current_statement_begin__ = 34;
        if (as_bool(logical_neq(intervention_switch, 0))) {
            current_statement_begin__ = 35;
            stan::math::assign(r, ((r0 * logical_lte(t, tau)) + ((logical_gt(t, tau) * r0) * stan::math::exp((zeta * (tau - t))))));
        } else {
            current_statement_begin__ = 37;
            stan::math::assign(r, r0);
        }
        current_statement_begin__ = 40;
        stan::model::assign(dydt, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                    (((-(r) * gamma) * S) * I), 
                    "assigning variable dydt");
        current_statement_begin__ = 41;
        stan::model::assign(dydt, 
                    stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                    ((((r * gamma) * S) * I) - (sigma * E)), 
                    "assigning variable dydt");
        current_statement_begin__ = 42;
        stan::model::assign(dydt, 
                    stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                    ((sigma * E) - (gamma * I)), 
                    "assigning variable dydt");
        current_statement_begin__ = 43;
        stan::model::assign(dydt, 
                    stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list()), 
                    (gamma * I), 
                    "assigning variable dydt");
        current_statement_begin__ = 44;
        stan::model::assign(dydt, 
                    stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list()), 
                    ((n * sigma) * E), 
                    "assigning variable dydt");
        current_statement_begin__ = 46;
        return stan::math::promote_scalar<fun_return_scalar_t__>(dydt);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct SEI_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type>
    operator()(const T0__& t,
        const std::vector<T1__>& y,
        const std::vector<T2__>& params,
        const std::vector<T3__>& x_r,
        const std::vector<int>& x_i, std::ostream* pstream__) const {
        return SEI(t, y, params, x_r, x_i, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, class RNG>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
normal_lb_rng(const T0__& mu,
                  const T1__& sigma,
                  const T2__& lb, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 53;
        local_scalar_t__ p(DUMMY_VAR__);
        (void) p;  // dummy to suppress unused var warning
        stan::math::initialize(p, DUMMY_VAR__);
        stan::math::fill(p, DUMMY_VAR__);
        stan::math::assign(p,normal_cdf(lb, mu, sigma));
        current_statement_begin__ = 54;
        local_scalar_t__ u(DUMMY_VAR__);
        (void) u;  // dummy to suppress unused var warning
        stan::math::initialize(u, DUMMY_VAR__);
        stan::math::fill(u, DUMMY_VAR__);
        stan::math::assign(u,uniform_rng(p, 1, base_rng__));
        current_statement_begin__ = 55;
        return stan::math::promote_scalar<fun_return_scalar_t__>(((sigma * inv_Phi(u)) + mu));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct normal_lb_rng_functor__ {
    template <typename T0__, typename T1__, typename T2__, class RNG>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& mu,
                  const T1__& sigma,
                  const T2__& lb, RNG& base_rng__, std::ostream* pstream__) const {
        return normal_lb_rng(mu, sigma, lb, base_rng__, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_hierarchical_SEIR_incidence_model
  : public stan::model::model_base_crtp<model_hierarchical_SEIR_incidence_model> {
private:
        int n_obs;
        int n_outbreaks;
        int n_difeq;
        int n_fake;
        int intervention_switch;
        int multilevel_intervention;
        int independent_r0;
        int independent_zeta;
        std::vector<std::vector<int> > y;
        std::vector<double> n_prior_mean;
        double tau_prior_mean;
        double gamma_mean;
        double gamma_sd;
        double sigma_mean;
        double sigma_sd;
        double S0_mean;
        double S0_sd;
        double r0_mean;
        double r0_sd;
        double zeta_mean;
        double zeta_sd;
        double t0;
        double tn;
        std::vector<double> ts;
        std::vector<double> fake_ts;
        std::vector<double> x_r;
        std::vector<int> x_i;
public:
    model_hierarchical_SEIR_incidence_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_hierarchical_SEIR_incidence_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_hierarchical_SEIR_incidence_model_namespace::model_hierarchical_SEIR_incidence_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 61;
            context__.validate_dims("data initialization", "n_obs", "int", context__.to_vec());
            n_obs = int(0);
            vals_i__ = context__.vals_i("n_obs");
            pos__ = 0;
            n_obs = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_obs", n_obs, 1);
            current_statement_begin__ = 62;
            context__.validate_dims("data initialization", "n_outbreaks", "int", context__.to_vec());
            n_outbreaks = int(0);
            vals_i__ = context__.vals_i("n_outbreaks");
            pos__ = 0;
            n_outbreaks = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_outbreaks", n_outbreaks, 1);
            current_statement_begin__ = 63;
            context__.validate_dims("data initialization", "n_difeq", "int", context__.to_vec());
            n_difeq = int(0);
            vals_i__ = context__.vals_i("n_difeq");
            pos__ = 0;
            n_difeq = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_difeq", n_difeq, 1);
            current_statement_begin__ = 64;
            context__.validate_dims("data initialization", "n_fake", "int", context__.to_vec());
            n_fake = int(0);
            vals_i__ = context__.vals_i("n_fake");
            pos__ = 0;
            n_fake = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_fake", n_fake, 1);
            current_statement_begin__ = 65;
            context__.validate_dims("data initialization", "intervention_switch", "int", context__.to_vec());
            intervention_switch = int(0);
            vals_i__ = context__.vals_i("intervention_switch");
            pos__ = 0;
            intervention_switch = vals_i__[pos__++];
            check_greater_or_equal(function__, "intervention_switch", intervention_switch, 0);
            check_less_or_equal(function__, "intervention_switch", intervention_switch, 1);
            current_statement_begin__ = 66;
            context__.validate_dims("data initialization", "multilevel_intervention", "int", context__.to_vec());
            multilevel_intervention = int(0);
            vals_i__ = context__.vals_i("multilevel_intervention");
            pos__ = 0;
            multilevel_intervention = vals_i__[pos__++];
            check_greater_or_equal(function__, "multilevel_intervention", multilevel_intervention, 0);
            check_less_or_equal(function__, "multilevel_intervention", multilevel_intervention, 1);
            current_statement_begin__ = 68;
            context__.validate_dims("data initialization", "independent_r0", "int", context__.to_vec());
            independent_r0 = int(0);
            vals_i__ = context__.vals_i("independent_r0");
            pos__ = 0;
            independent_r0 = vals_i__[pos__++];
            check_greater_or_equal(function__, "independent_r0", independent_r0, 0);
            check_less_or_equal(function__, "independent_r0", independent_r0, 1);
            current_statement_begin__ = 71;
            context__.validate_dims("data initialization", "independent_zeta", "int", context__.to_vec());
            independent_zeta = int(0);
            vals_i__ = context__.vals_i("independent_zeta");
            pos__ = 0;
            independent_zeta = vals_i__[pos__++];
            check_greater_or_equal(function__, "independent_zeta", independent_zeta, 0);
            check_less_or_equal(function__, "independent_zeta", independent_zeta, 1);
            current_statement_begin__ = 74;
            validate_non_negative_index("y", "n_obs", n_obs);
            validate_non_negative_index("y", "n_outbreaks", n_outbreaks);
            context__.validate_dims("data initialization", "y", "int", context__.to_vec(n_obs,n_outbreaks));
            y = std::vector<std::vector<int> >(n_obs, std::vector<int>(n_outbreaks, int(0)));
            vals_i__ = context__.vals_i("y");
            pos__ = 0;
            size_t y_k_0_max__ = n_obs;
            size_t y_k_1_max__ = n_outbreaks;
            for (size_t k_1__ = 0; k_1__ < y_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                    y[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 77;
            validate_non_negative_index("n_prior_mean", "n_outbreaks", n_outbreaks);
            context__.validate_dims("data initialization", "n_prior_mean", "double", context__.to_vec(n_outbreaks));
            n_prior_mean = std::vector<double>(n_outbreaks, double(0));
            vals_r__ = context__.vals_r("n_prior_mean");
            pos__ = 0;
            size_t n_prior_mean_k_0_max__ = n_outbreaks;
            for (size_t k_0__ = 0; k_0__ < n_prior_mean_k_0_max__; ++k_0__) {
                n_prior_mean[k_0__] = vals_r__[pos__++];
            }
            size_t n_prior_mean_i_0_max__ = n_outbreaks;
            for (size_t i_0__ = 0; i_0__ < n_prior_mean_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "n_prior_mean[i_0__]", n_prior_mean[i_0__], 0);
            }
            current_statement_begin__ = 78;
            context__.validate_dims("data initialization", "tau_prior_mean", "double", context__.to_vec());
            tau_prior_mean = double(0);
            vals_r__ = context__.vals_r("tau_prior_mean");
            pos__ = 0;
            tau_prior_mean = vals_r__[pos__++];
            check_greater_or_equal(function__, "tau_prior_mean", tau_prior_mean, 0);
            current_statement_begin__ = 79;
            context__.validate_dims("data initialization", "gamma_mean", "double", context__.to_vec());
            gamma_mean = double(0);
            vals_r__ = context__.vals_r("gamma_mean");
            pos__ = 0;
            gamma_mean = vals_r__[pos__++];
            check_greater_or_equal(function__, "gamma_mean", gamma_mean, 0);
            current_statement_begin__ = 80;
            context__.validate_dims("data initialization", "gamma_sd", "double", context__.to_vec());
            gamma_sd = double(0);
            vals_r__ = context__.vals_r("gamma_sd");
            pos__ = 0;
            gamma_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "gamma_sd", gamma_sd, 0);
            current_statement_begin__ = 81;
            context__.validate_dims("data initialization", "sigma_mean", "double", context__.to_vec());
            sigma_mean = double(0);
            vals_r__ = context__.vals_r("sigma_mean");
            pos__ = 0;
            sigma_mean = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_mean", sigma_mean, 0);
            current_statement_begin__ = 82;
            context__.validate_dims("data initialization", "sigma_sd", "double", context__.to_vec());
            sigma_sd = double(0);
            vals_r__ = context__.vals_r("sigma_sd");
            pos__ = 0;
            sigma_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_sd", sigma_sd, 0);
            current_statement_begin__ = 83;
            context__.validate_dims("data initialization", "S0_mean", "double", context__.to_vec());
            S0_mean = double(0);
            vals_r__ = context__.vals_r("S0_mean");
            pos__ = 0;
            S0_mean = vals_r__[pos__++];
            check_greater_or_equal(function__, "S0_mean", S0_mean, 0);
            current_statement_begin__ = 84;
            context__.validate_dims("data initialization", "S0_sd", "double", context__.to_vec());
            S0_sd = double(0);
            vals_r__ = context__.vals_r("S0_sd");
            pos__ = 0;
            S0_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "S0_sd", S0_sd, 0);
            current_statement_begin__ = 85;
            context__.validate_dims("data initialization", "r0_mean", "double", context__.to_vec());
            r0_mean = double(0);
            vals_r__ = context__.vals_r("r0_mean");
            pos__ = 0;
            r0_mean = vals_r__[pos__++];
            check_greater_or_equal(function__, "r0_mean", r0_mean, 0);
            current_statement_begin__ = 86;
            context__.validate_dims("data initialization", "r0_sd", "double", context__.to_vec());
            r0_sd = double(0);
            vals_r__ = context__.vals_r("r0_sd");
            pos__ = 0;
            r0_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "r0_sd", r0_sd, 0);
            current_statement_begin__ = 87;
            context__.validate_dims("data initialization", "zeta_mean", "double", context__.to_vec());
            zeta_mean = double(0);
            vals_r__ = context__.vals_r("zeta_mean");
            pos__ = 0;
            zeta_mean = vals_r__[pos__++];
            check_greater_or_equal(function__, "zeta_mean", zeta_mean, 0);
            current_statement_begin__ = 88;
            context__.validate_dims("data initialization", "zeta_sd", "double", context__.to_vec());
            zeta_sd = double(0);
            vals_r__ = context__.vals_r("zeta_sd");
            pos__ = 0;
            zeta_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "zeta_sd", zeta_sd, 0);
            current_statement_begin__ = 92;
            context__.validate_dims("data initialization", "t0", "double", context__.to_vec());
            t0 = double(0);
            vals_r__ = context__.vals_r("t0");
            pos__ = 0;
            t0 = vals_r__[pos__++];
            current_statement_begin__ = 93;
            context__.validate_dims("data initialization", "tn", "double", context__.to_vec());
            tn = double(0);
            vals_r__ = context__.vals_r("tn");
            pos__ = 0;
            tn = vals_r__[pos__++];
            current_statement_begin__ = 94;
            validate_non_negative_index("ts", "n_obs", n_obs);
            context__.validate_dims("data initialization", "ts", "double", context__.to_vec(n_obs));
            ts = std::vector<double>(n_obs, double(0));
            vals_r__ = context__.vals_r("ts");
            pos__ = 0;
            size_t ts_k_0_max__ = n_obs;
            for (size_t k_0__ = 0; k_0__ < ts_k_0_max__; ++k_0__) {
                ts[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 96;
            validate_non_negative_index("fake_ts", "n_fake", n_fake);
            context__.validate_dims("data initialization", "fake_ts", "double", context__.to_vec(n_fake));
            fake_ts = std::vector<double>(n_fake, double(0));
            vals_r__ = context__.vals_r("fake_ts");
            pos__ = 0;
            size_t fake_ts_k_0_max__ = n_fake;
            for (size_t k_0__ = 0; k_0__ < fake_ts_k_0_max__; ++k_0__) {
                fake_ts[k_0__] = vals_r__[pos__++];
            }
            // initialize transformed data variables
            current_statement_begin__ = 100;
            validate_non_negative_index("x_r", "0", 0);
            x_r = std::vector<double>(0, double(0));
            stan::math::fill(x_r, DUMMY_VAR__);
            current_statement_begin__ = 101;
            validate_non_negative_index("x_i", "1", 1);
            x_i = std::vector<int>(1, int(0));
            stan::math::fill(x_i, std::numeric_limits<int>::min());
            // execute transformed data statements
            current_statement_begin__ = 103;
            stan::model::assign(x_i, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        intervention_switch, 
                        "assigning variable x_i");
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 110;
            num_params_r__ += 1;
            current_statement_begin__ = 111;
            num_params_r__ += 1;
            current_statement_begin__ = 114;
            validate_non_negative_index("r0k_raw", "n_outbreaks", n_outbreaks);
            num_params_r__ += n_outbreaks;
            current_statement_begin__ = 116;
            num_params_r__ += 1;
            current_statement_begin__ = 117;
            num_params_r__ += 1;
            current_statement_begin__ = 118;
            num_params_r__ += 1;
            current_statement_begin__ = 119;
            num_params_r__ += 1;
            current_statement_begin__ = 122;
            num_params_r__ += 1;
            current_statement_begin__ = 123;
            validate_non_negative_index("zetak_raw", "n_outbreaks", n_outbreaks);
            num_params_r__ += n_outbreaks;
            current_statement_begin__ = 125;
            validate_non_negative_index("n", "n_outbreaks", n_outbreaks);
            num_params_r__ += (1 * n_outbreaks);
            current_statement_begin__ = 126;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_hierarchical_SEIR_incidence_model() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 110;
        if (!(context__.contains_r("r0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable r0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("r0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "r0", "double", context__.to_vec());
        double r0(0);
        r0 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, r0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable r0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 111;
        if (!(context__.contains_r("r0_sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable r0_sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("r0_sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "r0_sigma", "double", context__.to_vec());
        double r0_sigma(0);
        r0_sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, r0_sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable r0_sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 114;
        if (!(context__.contains_r("r0k_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable r0k_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("r0k_raw");
        pos__ = 0U;
        validate_non_negative_index("r0k_raw", "n_outbreaks", n_outbreaks);
        context__.validate_dims("parameter initialization", "r0k_raw", "vector_d", context__.to_vec(n_outbreaks));
        Eigen::Matrix<double, Eigen::Dynamic, 1> r0k_raw(n_outbreaks);
        size_t r0k_raw_j_1_max__ = n_outbreaks;
        for (size_t j_1__ = 0; j_1__ < r0k_raw_j_1_max__; ++j_1__) {
            r0k_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, r0k_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable r0k_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 116;
        if (!(context__.contains_r("std_gamma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable std_gamma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("std_gamma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "std_gamma", "double", context__.to_vec());
        double std_gamma(0);
        std_gamma = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(std_gamma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable std_gamma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 117;
        if (!(context__.contains_r("std_sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable std_sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("std_sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "std_sigma", "double", context__.to_vec());
        double std_sigma(0);
        std_sigma = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(std_sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable std_sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 118;
        if (!(context__.contains_r("tau")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "tau", "double", context__.to_vec());
        double tau(0);
        tau = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, tau);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 119;
        if (!(context__.contains_r("zeta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable zeta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("zeta");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "zeta", "double", context__.to_vec());
        double zeta(0);
        zeta = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, zeta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable zeta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 122;
        if (!(context__.contains_r("zeta_sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable zeta_sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("zeta_sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "zeta_sigma", "double", context__.to_vec());
        double zeta_sigma(0);
        zeta_sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, zeta_sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable zeta_sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 123;
        if (!(context__.contains_r("zetak_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable zetak_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("zetak_raw");
        pos__ = 0U;
        validate_non_negative_index("zetak_raw", "n_outbreaks", n_outbreaks);
        context__.validate_dims("parameter initialization", "zetak_raw", "vector_d", context__.to_vec(n_outbreaks));
        Eigen::Matrix<double, Eigen::Dynamic, 1> zetak_raw(n_outbreaks);
        size_t zetak_raw_j_1_max__ = n_outbreaks;
        for (size_t j_1__ = 0; j_1__ < zetak_raw_j_1_max__; ++j_1__) {
            zetak_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, zetak_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable zetak_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 125;
        if (!(context__.contains_r("n")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable n missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("n");
        pos__ = 0U;
        validate_non_negative_index("n", "n_outbreaks", n_outbreaks);
        context__.validate_dims("parameter initialization", "n", "double", context__.to_vec(n_outbreaks));
        std::vector<double> n(n_outbreaks, double(0));
        size_t n_k_0_max__ = n_outbreaks;
        for (size_t k_0__ = 0; k_0__ < n_k_0_max__; ++k_0__) {
            n[k_0__] = vals_r__[pos__++];
        }
        size_t n_i_0_max__ = n_outbreaks;
        for (size_t i_0__ = 0; i_0__ < n_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, n[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable n: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 126;
        if (!(context__.contains_r("std_S0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable std_S0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("std_S0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "std_S0", "double", context__.to_vec());
        double std_S0(0);
        std_S0 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(std_S0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable std_S0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 110;
            local_scalar_t__ r0;
            (void) r0;  // dummy to suppress unused var warning
            if (jacobian__)
                r0 = in__.scalar_lb_constrain(0, lp__);
            else
                r0 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 111;
            local_scalar_t__ r0_sigma;
            (void) r0_sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                r0_sigma = in__.scalar_lb_constrain(0, lp__);
            else
                r0_sigma = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 114;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> r0k_raw;
            (void) r0k_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                r0k_raw = in__.vector_lb_constrain(0, n_outbreaks, lp__);
            else
                r0k_raw = in__.vector_lb_constrain(0, n_outbreaks);
            current_statement_begin__ = 116;
            local_scalar_t__ std_gamma;
            (void) std_gamma;  // dummy to suppress unused var warning
            if (jacobian__)
                std_gamma = in__.scalar_constrain(lp__);
            else
                std_gamma = in__.scalar_constrain();
            current_statement_begin__ = 117;
            local_scalar_t__ std_sigma;
            (void) std_sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                std_sigma = in__.scalar_constrain(lp__);
            else
                std_sigma = in__.scalar_constrain();
            current_statement_begin__ = 118;
            local_scalar_t__ tau;
            (void) tau;  // dummy to suppress unused var warning
            if (jacobian__)
                tau = in__.scalar_lb_constrain(0, lp__);
            else
                tau = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 119;
            local_scalar_t__ zeta;
            (void) zeta;  // dummy to suppress unused var warning
            if (jacobian__)
                zeta = in__.scalar_lb_constrain(0, lp__);
            else
                zeta = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 122;
            local_scalar_t__ zeta_sigma;
            (void) zeta_sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                zeta_sigma = in__.scalar_lb_constrain(0, lp__);
            else
                zeta_sigma = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 123;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> zetak_raw;
            (void) zetak_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                zetak_raw = in__.vector_lb_constrain(0, n_outbreaks, lp__);
            else
                zetak_raw = in__.vector_lb_constrain(0, n_outbreaks);
            current_statement_begin__ = 125;
            std::vector<local_scalar_t__> n;
            size_t n_d_0_max__ = n_outbreaks;
            n.reserve(n_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < n_d_0_max__; ++d_0__) {
                if (jacobian__)
                    n.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    n.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 126;
            local_scalar_t__ std_S0;
            (void) std_S0;  // dummy to suppress unused var warning
            if (jacobian__)
                std_S0 = in__.scalar_constrain(lp__);
            else
                std_S0 = in__.scalar_constrain();
            // transformed parameters
            current_statement_begin__ = 131;
            validate_non_negative_index("y_hat", "n_obs", n_obs);
            validate_non_negative_index("y_hat", "n_difeq", n_difeq);
            std::vector<std::vector<local_scalar_t__> > y_hat(n_obs, std::vector<local_scalar_t__>(n_difeq, local_scalar_t__(0)));
            stan::math::initialize(y_hat, DUMMY_VAR__);
            stan::math::fill(y_hat, DUMMY_VAR__);
            current_statement_begin__ = 132;
            validate_non_negative_index("incidence", "n_obs", n_obs);
            validate_non_negative_index("incidence", "n_outbreaks", n_outbreaks);
            std::vector<std::vector<local_scalar_t__> > incidence(n_obs, std::vector<local_scalar_t__>(n_outbreaks, local_scalar_t__(0)));
            stan::math::initialize(incidence, DUMMY_VAR__);
            stan::math::fill(incidence, DUMMY_VAR__);
            current_statement_begin__ = 133;
            validate_non_negative_index("y0", "n_difeq", n_difeq);
            std::vector<local_scalar_t__> y0(n_difeq, local_scalar_t__(0));
            stan::math::initialize(y0, DUMMY_VAR__);
            stan::math::fill(y0, DUMMY_VAR__);
            current_statement_begin__ = 134;
            validate_non_negative_index("r0k", "n_outbreaks", n_outbreaks);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> r0k(n_outbreaks);
            stan::math::initialize(r0k, DUMMY_VAR__);
            stan::math::fill(r0k, DUMMY_VAR__);
            current_statement_begin__ = 135;
            validate_non_negative_index("zetak", "n_outbreaks", n_outbreaks);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> zetak(n_outbreaks);
            stan::math::initialize(zetak, DUMMY_VAR__);
            stan::math::fill(zetak, DUMMY_VAR__);
            current_statement_begin__ = 136;
            validate_non_negative_index("params", "6", 6);
            std::vector<local_scalar_t__> params(6, local_scalar_t__(0));
            stan::math::initialize(params, DUMMY_VAR__);
            stan::math::fill(params, DUMMY_VAR__);
            current_statement_begin__ = 137;
            local_scalar_t__ gamma;
            (void) gamma;  // dummy to suppress unused var warning
            stan::math::initialize(gamma, DUMMY_VAR__);
            stan::math::fill(gamma, DUMMY_VAR__);
            current_statement_begin__ = 138;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma, DUMMY_VAR__);
            current_statement_begin__ = 140;
            local_scalar_t__ S0;
            (void) S0;  // dummy to suppress unused var warning
            stan::math::initialize(S0, DUMMY_VAR__);
            stan::math::fill(S0, DUMMY_VAR__);
            current_statement_begin__ = 142;
            local_scalar_t__ eps;
            (void) eps;  // dummy to suppress unused var warning
            stan::math::initialize(eps, DUMMY_VAR__);
            stan::math::fill(eps, DUMMY_VAR__);
            stan::math::assign(eps,1e-4);
            // transformed parameters block statements
            current_statement_begin__ = 145;
            stan::math::assign(gamma, (gamma_mean + (gamma_sd * std_gamma)));
            current_statement_begin__ = 146;
            stan::math::assign(sigma, (sigma_mean + (sigma_sd * std_sigma)));
            current_statement_begin__ = 149;
            stan::math::assign(S0, (S0_mean + (S0_sd * std_S0)));
            current_statement_begin__ = 152;
            if (as_bool(logical_eq(independent_r0, 1))) {
                current_statement_begin__ = 153;
                stan::math::assign(r0k, add(r0_mean, multiply(r0_sd, r0k_raw)));
            } else {
                current_statement_begin__ = 155;
                stan::math::assign(r0k, add(r0, multiply(r0_sigma, r0k_raw)));
            }
            current_statement_begin__ = 159;
            if (as_bool(logical_eq(independent_zeta, 1))) {
                current_statement_begin__ = 160;
                stan::math::assign(zetak, add(zeta_mean, multiply(zeta_sd, zetak_raw)));
            } else {
                current_statement_begin__ = 162;
                stan::math::assign(zetak, add(zeta, multiply(zeta_sigma, zetak_raw)));
            }
            current_statement_begin__ = 166;
            for (int k = 1; k <= n_outbreaks; ++k) {
                current_statement_begin__ = 169;
                stan::model::assign(params, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            get_base1(r0k, k, "r0k", 1), 
                            "assigning variable params");
                current_statement_begin__ = 170;
                stan::model::assign(params, 
                            stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                            sigma, 
                            "assigning variable params");
                current_statement_begin__ = 171;
                stan::model::assign(params, 
                            stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                            gamma, 
                            "assigning variable params");
                current_statement_begin__ = 172;
                stan::model::assign(params, 
                            stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list()), 
                            get_base1(n, k, "n", 1), 
                            "assigning variable params");
                current_statement_begin__ = 176;
                if (as_bool(logical_neq(intervention_switch, 0))) {
                    current_statement_begin__ = 177;
                    stan::model::assign(params, 
                                stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list()), 
                                tau, 
                                "assigning variable params");
                    current_statement_begin__ = 180;
                    if (as_bool(logical_eq(multilevel_intervention, 0))) {
                        current_statement_begin__ = 181;
                        stan::model::assign(params, 
                                    stan::model::cons_list(stan::model::index_uni(6), stan::model::nil_index_list()), 
                                    zeta, 
                                    "assigning variable params");
                    } else {
                        current_statement_begin__ = 183;
                        stan::model::assign(params, 
                                    stan::model::cons_list(stan::model::index_uni(6), stan::model::nil_index_list()), 
                                    get_base1(zetak, k, "zetak", 1), 
                                    "assigning variable params");
                    }
                } else {
                    current_statement_begin__ = 187;
                    stan::model::assign(params, 
                                stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list()), 
                                0, 
                                "assigning variable params");
                    current_statement_begin__ = 188;
                    stan::model::assign(params, 
                                stan::model::cons_list(stan::model::index_uni(6), stan::model::nil_index_list()), 
                                0, 
                                "assigning variable params");
                }
                current_statement_begin__ = 193;
                stan::model::assign(y0, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            S0, 
                            "assigning variable y0");
                current_statement_begin__ = 194;
                stan::model::assign(y0, 
                            stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                            (1 - S0), 
                            "assigning variable y0");
                current_statement_begin__ = 195;
                stan::model::assign(y0, 
                            stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable y0");
                current_statement_begin__ = 196;
                stan::model::assign(y0, 
                            stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable y0");
                current_statement_begin__ = 197;
                stan::model::assign(y0, 
                            stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable y0");
                current_statement_begin__ = 199;
                stan::math::assign(y_hat, integrate_ode_rk45(SEI_functor__(), y0, t0, ts, params, x_r, x_i, pstream__));
                current_statement_begin__ = 200;
                stan::model::assign(incidence, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                            stan::model::rvalue(y_hat, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list())), "y_hat"), 
                            "assigning variable incidence");
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 131;
            size_t y_hat_k_0_max__ = n_obs;
            size_t y_hat_k_1_max__ = n_difeq;
            for (size_t k_0__ = 0; k_0__ < y_hat_k_0_max__; ++k_0__) {
                for (size_t k_1__ = 0; k_1__ < y_hat_k_1_max__; ++k_1__) {
                    if (stan::math::is_uninitialized(y_hat[k_0__][k_1__])) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: y_hat" << "[" << k_0__ << "]" << "[" << k_1__ << "]";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable y_hat: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 132;
            size_t incidence_k_0_max__ = n_obs;
            size_t incidence_k_1_max__ = n_outbreaks;
            for (size_t k_0__ = 0; k_0__ < incidence_k_0_max__; ++k_0__) {
                for (size_t k_1__ = 0; k_1__ < incidence_k_1_max__; ++k_1__) {
                    if (stan::math::is_uninitialized(incidence[k_0__][k_1__])) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: incidence" << "[" << k_0__ << "]" << "[" << k_1__ << "]";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable incidence: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 133;
            size_t y0_k_0_max__ = n_difeq;
            for (size_t k_0__ = 0; k_0__ < y0_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(y0[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: y0" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable y0: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 134;
            size_t r0k_j_1_max__ = n_outbreaks;
            for (size_t j_1__ = 0; j_1__ < r0k_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(r0k(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: r0k" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable r0k: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "r0k", r0k, 0);
            current_statement_begin__ = 135;
            size_t zetak_j_1_max__ = n_outbreaks;
            for (size_t j_1__ = 0; j_1__ < zetak_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(zetak(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: zetak" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable zetak: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "zetak", zetak, 0);
            current_statement_begin__ = 136;
            size_t params_k_0_max__ = 6;
            for (size_t k_0__ = 0; k_0__ < params_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(params[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: params" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable params: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 137;
            if (stan::math::is_uninitialized(gamma)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: gamma";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable gamma: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "gamma", gamma, 0);
            current_statement_begin__ = 138;
            if (stan::math::is_uninitialized(sigma)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: sigma";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sigma: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "sigma", sigma, 0);
            current_statement_begin__ = 140;
            if (stan::math::is_uninitialized(S0)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: S0";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable S0: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "S0", S0, 0);
            check_less_or_equal(function__, "S0", S0, 1);
            current_statement_begin__ = 142;
            if (stan::math::is_uninitialized(eps)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: eps";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable eps: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            // model body
            current_statement_begin__ = 208;
            lp_accum__.add(normal_log<propto__>(r0, r0_mean, r0_sd));
            current_statement_begin__ = 209;
            lp_accum__.add(normal_log<propto__>(r0_sigma, 0, 1));
            current_statement_begin__ = 210;
            lp_accum__.add(std_normal_log<propto__>(r0k_raw));
            current_statement_begin__ = 212;
            lp_accum__.add(std_normal_log<propto__>(std_gamma));
            current_statement_begin__ = 213;
            lp_accum__.add(std_normal_log<propto__>(std_sigma));
            current_statement_begin__ = 214;
            lp_accum__.add(normal_log<propto__>(n, n_prior_mean, 10));
            current_statement_begin__ = 216;
            lp_accum__.add(std_normal_log<propto__>(std_S0));
            current_statement_begin__ = 220;
            lp_accum__.add(normal_log<propto__>(tau, tau_prior_mean, 1.0));
            current_statement_begin__ = 221;
            lp_accum__.add(normal_log<propto__>(zeta, zeta_mean, zeta_sd));
            current_statement_begin__ = 223;
            lp_accum__.add(normal_log<propto__>(zeta_sigma, 0, 1));
            current_statement_begin__ = 224;
            lp_accum__.add(std_normal_log<propto__>(zetak_raw));
            current_statement_begin__ = 226;
            for (int k = 1; k <= n_outbreaks; ++k) {
                current_statement_begin__ = 227;
                for (int i = 2; i <= n_obs; ++i) {
                    current_statement_begin__ = 228;
                    lp_accum__.add(poisson_log<propto__>(get_base1(get_base1(y, i, "y", 1), k, "y", 2), max(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add((get_base1(get_base1(incidence, i, "incidence", 1), k, "incidence", 2) - get_base1(get_base1(incidence, (i - 1), "incidence", 1), k, "incidence", 2))).add(1e-10).array()))));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("r0");
        names__.push_back("r0_sigma");
        names__.push_back("r0k_raw");
        names__.push_back("std_gamma");
        names__.push_back("std_sigma");
        names__.push_back("tau");
        names__.push_back("zeta");
        names__.push_back("zeta_sigma");
        names__.push_back("zetak_raw");
        names__.push_back("n");
        names__.push_back("std_S0");
        names__.push_back("y_hat");
        names__.push_back("incidence");
        names__.push_back("y0");
        names__.push_back("r0k");
        names__.push_back("zetak");
        names__.push_back("params");
        names__.push_back("gamma");
        names__.push_back("sigma");
        names__.push_back("S0");
        names__.push_back("eps");
        names__.push_back("fake_I");
        names__.push_back("fake_incidence");
        names__.push_back("diff_I");
        names__.push_back("hyper_priors");
        names__.push_back("p_r0");
        names__.push_back("p_gamma");
        names__.push_back("p_sigma");
        names__.push_back("p_tau");
        names__.push_back("p_zeta");
        names__.push_back("predictive_r0");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_outbreaks);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_outbreaks);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_outbreaks);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_obs);
        dims__.push_back(n_difeq);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_obs);
        dims__.push_back(n_outbreaks);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_difeq);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_outbreaks);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_outbreaks);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(6);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_fake);
        dims__.push_back(n_difeq);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_fake);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(5);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_hierarchical_SEIR_incidence_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double r0 = in__.scalar_lb_constrain(0);
        vars__.push_back(r0);
        double r0_sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(r0_sigma);
        Eigen::Matrix<double, Eigen::Dynamic, 1> r0k_raw = in__.vector_lb_constrain(0, n_outbreaks);
        size_t r0k_raw_j_1_max__ = n_outbreaks;
        for (size_t j_1__ = 0; j_1__ < r0k_raw_j_1_max__; ++j_1__) {
            vars__.push_back(r0k_raw(j_1__));
        }
        double std_gamma = in__.scalar_constrain();
        vars__.push_back(std_gamma);
        double std_sigma = in__.scalar_constrain();
        vars__.push_back(std_sigma);
        double tau = in__.scalar_lb_constrain(0);
        vars__.push_back(tau);
        double zeta = in__.scalar_lb_constrain(0);
        vars__.push_back(zeta);
        double zeta_sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(zeta_sigma);
        Eigen::Matrix<double, Eigen::Dynamic, 1> zetak_raw = in__.vector_lb_constrain(0, n_outbreaks);
        size_t zetak_raw_j_1_max__ = n_outbreaks;
        for (size_t j_1__ = 0; j_1__ < zetak_raw_j_1_max__; ++j_1__) {
            vars__.push_back(zetak_raw(j_1__));
        }
        std::vector<double> n;
        size_t n_d_0_max__ = n_outbreaks;
        n.reserve(n_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < n_d_0_max__; ++d_0__) {
            n.push_back(in__.scalar_lb_constrain(0));
        }
        size_t n_k_0_max__ = n_outbreaks;
        for (size_t k_0__ = 0; k_0__ < n_k_0_max__; ++k_0__) {
            vars__.push_back(n[k_0__]);
        }
        double std_S0 = in__.scalar_constrain();
        vars__.push_back(std_S0);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 131;
            validate_non_negative_index("y_hat", "n_obs", n_obs);
            validate_non_negative_index("y_hat", "n_difeq", n_difeq);
            std::vector<std::vector<double> > y_hat(n_obs, std::vector<double>(n_difeq, double(0)));
            stan::math::initialize(y_hat, DUMMY_VAR__);
            stan::math::fill(y_hat, DUMMY_VAR__);
            current_statement_begin__ = 132;
            validate_non_negative_index("incidence", "n_obs", n_obs);
            validate_non_negative_index("incidence", "n_outbreaks", n_outbreaks);
            std::vector<std::vector<double> > incidence(n_obs, std::vector<double>(n_outbreaks, double(0)));
            stan::math::initialize(incidence, DUMMY_VAR__);
            stan::math::fill(incidence, DUMMY_VAR__);
            current_statement_begin__ = 133;
            validate_non_negative_index("y0", "n_difeq", n_difeq);
            std::vector<double> y0(n_difeq, double(0));
            stan::math::initialize(y0, DUMMY_VAR__);
            stan::math::fill(y0, DUMMY_VAR__);
            current_statement_begin__ = 134;
            validate_non_negative_index("r0k", "n_outbreaks", n_outbreaks);
            Eigen::Matrix<double, Eigen::Dynamic, 1> r0k(n_outbreaks);
            stan::math::initialize(r0k, DUMMY_VAR__);
            stan::math::fill(r0k, DUMMY_VAR__);
            current_statement_begin__ = 135;
            validate_non_negative_index("zetak", "n_outbreaks", n_outbreaks);
            Eigen::Matrix<double, Eigen::Dynamic, 1> zetak(n_outbreaks);
            stan::math::initialize(zetak, DUMMY_VAR__);
            stan::math::fill(zetak, DUMMY_VAR__);
            current_statement_begin__ = 136;
            validate_non_negative_index("params", "6", 6);
            std::vector<double> params(6, double(0));
            stan::math::initialize(params, DUMMY_VAR__);
            stan::math::fill(params, DUMMY_VAR__);
            current_statement_begin__ = 137;
            double gamma;
            (void) gamma;  // dummy to suppress unused var warning
            stan::math::initialize(gamma, DUMMY_VAR__);
            stan::math::fill(gamma, DUMMY_VAR__);
            current_statement_begin__ = 138;
            double sigma;
            (void) sigma;  // dummy to suppress unused var warning
            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma, DUMMY_VAR__);
            current_statement_begin__ = 140;
            double S0;
            (void) S0;  // dummy to suppress unused var warning
            stan::math::initialize(S0, DUMMY_VAR__);
            stan::math::fill(S0, DUMMY_VAR__);
            current_statement_begin__ = 142;
            double eps;
            (void) eps;  // dummy to suppress unused var warning
            stan::math::initialize(eps, DUMMY_VAR__);
            stan::math::fill(eps, DUMMY_VAR__);
            stan::math::assign(eps,1e-4);
            // do transformed parameters statements
            current_statement_begin__ = 145;
            stan::math::assign(gamma, (gamma_mean + (gamma_sd * std_gamma)));
            current_statement_begin__ = 146;
            stan::math::assign(sigma, (sigma_mean + (sigma_sd * std_sigma)));
            current_statement_begin__ = 149;
            stan::math::assign(S0, (S0_mean + (S0_sd * std_S0)));
            current_statement_begin__ = 152;
            if (as_bool(logical_eq(independent_r0, 1))) {
                current_statement_begin__ = 153;
                stan::math::assign(r0k, add(r0_mean, multiply(r0_sd, r0k_raw)));
            } else {
                current_statement_begin__ = 155;
                stan::math::assign(r0k, add(r0, multiply(r0_sigma, r0k_raw)));
            }
            current_statement_begin__ = 159;
            if (as_bool(logical_eq(independent_zeta, 1))) {
                current_statement_begin__ = 160;
                stan::math::assign(zetak, add(zeta_mean, multiply(zeta_sd, zetak_raw)));
            } else {
                current_statement_begin__ = 162;
                stan::math::assign(zetak, add(zeta, multiply(zeta_sigma, zetak_raw)));
            }
            current_statement_begin__ = 166;
            for (int k = 1; k <= n_outbreaks; ++k) {
                current_statement_begin__ = 169;
                stan::model::assign(params, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            get_base1(r0k, k, "r0k", 1), 
                            "assigning variable params");
                current_statement_begin__ = 170;
                stan::model::assign(params, 
                            stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                            sigma, 
                            "assigning variable params");
                current_statement_begin__ = 171;
                stan::model::assign(params, 
                            stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                            gamma, 
                            "assigning variable params");
                current_statement_begin__ = 172;
                stan::model::assign(params, 
                            stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list()), 
                            get_base1(n, k, "n", 1), 
                            "assigning variable params");
                current_statement_begin__ = 176;
                if (as_bool(logical_neq(intervention_switch, 0))) {
                    current_statement_begin__ = 177;
                    stan::model::assign(params, 
                                stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list()), 
                                tau, 
                                "assigning variable params");
                    current_statement_begin__ = 180;
                    if (as_bool(logical_eq(multilevel_intervention, 0))) {
                        current_statement_begin__ = 181;
                        stan::model::assign(params, 
                                    stan::model::cons_list(stan::model::index_uni(6), stan::model::nil_index_list()), 
                                    zeta, 
                                    "assigning variable params");
                    } else {
                        current_statement_begin__ = 183;
                        stan::model::assign(params, 
                                    stan::model::cons_list(stan::model::index_uni(6), stan::model::nil_index_list()), 
                                    get_base1(zetak, k, "zetak", 1), 
                                    "assigning variable params");
                    }
                } else {
                    current_statement_begin__ = 187;
                    stan::model::assign(params, 
                                stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list()), 
                                0, 
                                "assigning variable params");
                    current_statement_begin__ = 188;
                    stan::model::assign(params, 
                                stan::model::cons_list(stan::model::index_uni(6), stan::model::nil_index_list()), 
                                0, 
                                "assigning variable params");
                }
                current_statement_begin__ = 193;
                stan::model::assign(y0, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            S0, 
                            "assigning variable y0");
                current_statement_begin__ = 194;
                stan::model::assign(y0, 
                            stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                            (1 - S0), 
                            "assigning variable y0");
                current_statement_begin__ = 195;
                stan::model::assign(y0, 
                            stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable y0");
                current_statement_begin__ = 196;
                stan::model::assign(y0, 
                            stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable y0");
                current_statement_begin__ = 197;
                stan::model::assign(y0, 
                            stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable y0");
                current_statement_begin__ = 199;
                stan::math::assign(y_hat, integrate_ode_rk45(SEI_functor__(), y0, t0, ts, params, x_r, x_i, pstream__));
                current_statement_begin__ = 200;
                stan::model::assign(incidence, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                            stan::model::rvalue(y_hat, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list())), "y_hat"), 
                            "assigning variable incidence");
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 134;
            check_greater_or_equal(function__, "r0k", r0k, 0);
            current_statement_begin__ = 135;
            check_greater_or_equal(function__, "zetak", zetak, 0);
            current_statement_begin__ = 137;
            check_greater_or_equal(function__, "gamma", gamma, 0);
            current_statement_begin__ = 138;
            check_greater_or_equal(function__, "sigma", sigma, 0);
            current_statement_begin__ = 140;
            check_greater_or_equal(function__, "S0", S0, 0);
            check_less_or_equal(function__, "S0", S0, 1);
            // write transformed parameters
            if (include_tparams__) {
                size_t y_hat_k_0_max__ = n_obs;
                size_t y_hat_k_1_max__ = n_difeq;
                for (size_t k_1__ = 0; k_1__ < y_hat_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < y_hat_k_0_max__; ++k_0__) {
                        vars__.push_back(y_hat[k_0__][k_1__]);
                    }
                }
                size_t incidence_k_0_max__ = n_obs;
                size_t incidence_k_1_max__ = n_outbreaks;
                for (size_t k_1__ = 0; k_1__ < incidence_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < incidence_k_0_max__; ++k_0__) {
                        vars__.push_back(incidence[k_0__][k_1__]);
                    }
                }
                size_t y0_k_0_max__ = n_difeq;
                for (size_t k_0__ = 0; k_0__ < y0_k_0_max__; ++k_0__) {
                    vars__.push_back(y0[k_0__]);
                }
                size_t r0k_j_1_max__ = n_outbreaks;
                for (size_t j_1__ = 0; j_1__ < r0k_j_1_max__; ++j_1__) {
                    vars__.push_back(r0k(j_1__));
                }
                size_t zetak_j_1_max__ = n_outbreaks;
                for (size_t j_1__ = 0; j_1__ < zetak_j_1_max__; ++j_1__) {
                    vars__.push_back(zetak(j_1__));
                }
                size_t params_k_0_max__ = 6;
                for (size_t k_0__ = 0; k_0__ < params_k_0_max__; ++k_0__) {
                    vars__.push_back(params[k_0__]);
                }
                vars__.push_back(gamma);
                vars__.push_back(sigma);
                vars__.push_back(S0);
                vars__.push_back(eps);
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 238;
            validate_non_negative_index("fake_I", "n_fake", n_fake);
            validate_non_negative_index("fake_I", "n_difeq", n_difeq);
            std::vector<std::vector<double> > fake_I(n_fake, std::vector<double>(n_difeq, double(0)));
            stan::math::initialize(fake_I, DUMMY_VAR__);
            stan::math::fill(fake_I, DUMMY_VAR__);
            current_statement_begin__ = 241;
            validate_non_negative_index("fake_incidence", "n_fake", n_fake);
            std::vector<double> fake_incidence(n_fake, double(0));
            stan::math::initialize(fake_incidence, DUMMY_VAR__);
            stan::math::fill(fake_incidence, DUMMY_VAR__);
            current_statement_begin__ = 242;
            double diff_I;
            (void) diff_I;  // dummy to suppress unused var warning
            stan::math::initialize(diff_I, DUMMY_VAR__);
            stan::math::fill(diff_I, DUMMY_VAR__);
            current_statement_begin__ = 244;
            validate_non_negative_index("hyper_priors", "5", 5);
            std::vector<double> hyper_priors(5, double(0));
            stan::math::initialize(hyper_priors, DUMMY_VAR__);
            stan::math::fill(hyper_priors, DUMMY_VAR__);
            current_statement_begin__ = 245;
            double p_r0;
            (void) p_r0;  // dummy to suppress unused var warning
            stan::math::initialize(p_r0, DUMMY_VAR__);
            stan::math::fill(p_r0, DUMMY_VAR__);
            current_statement_begin__ = 246;
            double p_gamma;
            (void) p_gamma;  // dummy to suppress unused var warning
            stan::math::initialize(p_gamma, DUMMY_VAR__);
            stan::math::fill(p_gamma, DUMMY_VAR__);
            current_statement_begin__ = 247;
            double p_sigma;
            (void) p_sigma;  // dummy to suppress unused var warning
            stan::math::initialize(p_sigma, DUMMY_VAR__);
            stan::math::fill(p_sigma, DUMMY_VAR__);
            current_statement_begin__ = 248;
            double p_tau;
            (void) p_tau;  // dummy to suppress unused var warning
            stan::math::initialize(p_tau, DUMMY_VAR__);
            stan::math::fill(p_tau, DUMMY_VAR__);
            current_statement_begin__ = 249;
            double p_zeta;
            (void) p_zeta;  // dummy to suppress unused var warning
            stan::math::initialize(p_zeta, DUMMY_VAR__);
            stan::math::fill(p_zeta, DUMMY_VAR__);
            current_statement_begin__ = 251;
            double predictive_r0;
            (void) predictive_r0;  // dummy to suppress unused var warning
            stan::math::initialize(predictive_r0, DUMMY_VAR__);
            stan::math::fill(predictive_r0, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 253;
            stan::math::assign(fake_I, integrate_ode_rk45(SEI_functor__(), y0, t0, fake_ts, params, x_r, x_i, pstream__));
            current_statement_begin__ = 255;
            stan::model::assign(fake_incidence, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        0, 
                        "assigning variable fake_incidence");
            current_statement_begin__ = 256;
            for (int i = 2; i <= n_fake; ++i) {
                current_statement_begin__ = 257;
                stan::math::assign(diff_I, (get_base1(get_base1(fake_I, i, "fake_I", 1), 5, "fake_I", 2) - get_base1(get_base1(fake_I, (i - 1), "fake_I", 1), 5, "fake_I", 2)));
                current_statement_begin__ = 258;
                if (as_bool(logical_lt(diff_I, 0))) {
                    current_statement_begin__ = 259;
                    stan::math::assign(diff_I, 1e-3);
                }
                current_statement_begin__ = 261;
                stan::model::assign(fake_incidence, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            poisson_rng(diff_I, base_rng__), 
                            "assigning variable fake_incidence");
            }
            current_statement_begin__ = 265;
            stan::math::assign(predictive_r0, normal_lb_rng(r0, r0_sigma, 0, base_rng__, pstream__));
            current_statement_begin__ = 270;
            stan::math::assign(p_r0, normal_lb_rng(r0_mean, r0_sd, 0, base_rng__, pstream__));
            current_statement_begin__ = 271;
            stan::math::assign(p_gamma, normal_lb_rng(gamma_mean, gamma_sd, 0, base_rng__, pstream__));
            current_statement_begin__ = 272;
            stan::math::assign(p_sigma, normal_lb_rng(sigma_mean, sigma_sd, 0, base_rng__, pstream__));
            current_statement_begin__ = 273;
            stan::math::assign(p_tau, normal_lb_rng(tau_prior_mean, 1.0, 0, base_rng__, pstream__));
            current_statement_begin__ = 274;
            stan::math::assign(p_zeta, normal_lb_rng(zeta_mean, zeta_sd, 0, base_rng__, pstream__));
            current_statement_begin__ = 278;
            stan::model::assign(hyper_priors, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        p_r0, 
                        "assigning variable hyper_priors");
            current_statement_begin__ = 279;
            stan::model::assign(hyper_priors, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                        p_sigma, 
                        "assigning variable hyper_priors");
            current_statement_begin__ = 280;
            stan::model::assign(hyper_priors, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                        p_gamma, 
                        "assigning variable hyper_priors");
            current_statement_begin__ = 281;
            stan::model::assign(hyper_priors, 
                        stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list()), 
                        p_tau, 
                        "assigning variable hyper_priors");
            current_statement_begin__ = 282;
            stan::model::assign(hyper_priors, 
                        stan::model::cons_list(stan::model::index_uni(5), stan::model::nil_index_list()), 
                        p_zeta, 
                        "assigning variable hyper_priors");
            // validate, write generated quantities
            current_statement_begin__ = 238;
            size_t fake_I_k_0_max__ = n_fake;
            size_t fake_I_k_1_max__ = n_difeq;
            for (size_t k_1__ = 0; k_1__ < fake_I_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < fake_I_k_0_max__; ++k_0__) {
                    vars__.push_back(fake_I[k_0__][k_1__]);
                }
            }
            current_statement_begin__ = 241;
            size_t fake_incidence_k_0_max__ = n_fake;
            for (size_t k_0__ = 0; k_0__ < fake_incidence_k_0_max__; ++k_0__) {
                vars__.push_back(fake_incidence[k_0__]);
            }
            current_statement_begin__ = 242;
            vars__.push_back(diff_I);
            current_statement_begin__ = 244;
            size_t hyper_priors_k_0_max__ = 5;
            for (size_t k_0__ = 0; k_0__ < hyper_priors_k_0_max__; ++k_0__) {
                vars__.push_back(hyper_priors[k_0__]);
            }
            current_statement_begin__ = 245;
            check_greater_or_equal(function__, "p_r0", p_r0, 0);
            vars__.push_back(p_r0);
            current_statement_begin__ = 246;
            check_greater_or_equal(function__, "p_gamma", p_gamma, 0);
            vars__.push_back(p_gamma);
            current_statement_begin__ = 247;
            check_greater_or_equal(function__, "p_sigma", p_sigma, 0);
            vars__.push_back(p_sigma);
            current_statement_begin__ = 248;
            check_greater_or_equal(function__, "p_tau", p_tau, 0);
            vars__.push_back(p_tau);
            current_statement_begin__ = 249;
            check_greater_or_equal(function__, "p_zeta", p_zeta, 0);
            vars__.push_back(p_zeta);
            current_statement_begin__ = 251;
            check_greater_or_equal(function__, "predictive_r0", predictive_r0, 0);
            vars__.push_back(predictive_r0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_hierarchical_SEIR_incidence_model";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "r0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "r0_sigma";
        param_names__.push_back(param_name_stream__.str());
        size_t r0k_raw_j_1_max__ = n_outbreaks;
        for (size_t j_1__ = 0; j_1__ < r0k_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "r0k_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "std_gamma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "std_sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "zeta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "zeta_sigma";
        param_names__.push_back(param_name_stream__.str());
        size_t zetak_raw_j_1_max__ = n_outbreaks;
        for (size_t j_1__ = 0; j_1__ < zetak_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zetak_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t n_k_0_max__ = n_outbreaks;
        for (size_t k_0__ = 0; k_0__ < n_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "n" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "std_S0";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t y_hat_k_0_max__ = n_obs;
            size_t y_hat_k_1_max__ = n_difeq;
            for (size_t k_1__ = 0; k_1__ < y_hat_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < y_hat_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "y_hat" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t incidence_k_0_max__ = n_obs;
            size_t incidence_k_1_max__ = n_outbreaks;
            for (size_t k_1__ = 0; k_1__ < incidence_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < incidence_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "incidence" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t y0_k_0_max__ = n_difeq;
            for (size_t k_0__ = 0; k_0__ < y0_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "y0" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t r0k_j_1_max__ = n_outbreaks;
            for (size_t j_1__ = 0; j_1__ < r0k_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "r0k" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t zetak_j_1_max__ = n_outbreaks;
            for (size_t j_1__ = 0; j_1__ < zetak_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "zetak" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t params_k_0_max__ = 6;
            for (size_t k_0__ = 0; k_0__ < params_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "params" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "S0";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "eps";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
        size_t fake_I_k_0_max__ = n_fake;
        size_t fake_I_k_1_max__ = n_difeq;
        for (size_t k_1__ = 0; k_1__ < fake_I_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < fake_I_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "fake_I" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t fake_incidence_k_0_max__ = n_fake;
        for (size_t k_0__ = 0; k_0__ < fake_incidence_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "fake_incidence" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "diff_I";
        param_names__.push_back(param_name_stream__.str());
        size_t hyper_priors_k_0_max__ = 5;
        for (size_t k_0__ = 0; k_0__ < hyper_priors_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "hyper_priors" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_r0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_gamma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_tau";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_zeta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "predictive_r0";
        param_names__.push_back(param_name_stream__.str());
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "r0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "r0_sigma";
        param_names__.push_back(param_name_stream__.str());
        size_t r0k_raw_j_1_max__ = n_outbreaks;
        for (size_t j_1__ = 0; j_1__ < r0k_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "r0k_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "std_gamma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "std_sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "zeta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "zeta_sigma";
        param_names__.push_back(param_name_stream__.str());
        size_t zetak_raw_j_1_max__ = n_outbreaks;
        for (size_t j_1__ = 0; j_1__ < zetak_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zetak_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t n_k_0_max__ = n_outbreaks;
        for (size_t k_0__ = 0; k_0__ < n_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "n" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "std_S0";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t y_hat_k_0_max__ = n_obs;
            size_t y_hat_k_1_max__ = n_difeq;
            for (size_t k_1__ = 0; k_1__ < y_hat_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < y_hat_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "y_hat" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t incidence_k_0_max__ = n_obs;
            size_t incidence_k_1_max__ = n_outbreaks;
            for (size_t k_1__ = 0; k_1__ < incidence_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < incidence_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "incidence" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t y0_k_0_max__ = n_difeq;
            for (size_t k_0__ = 0; k_0__ < y0_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "y0" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t r0k_j_1_max__ = n_outbreaks;
            for (size_t j_1__ = 0; j_1__ < r0k_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "r0k" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t zetak_j_1_max__ = n_outbreaks;
            for (size_t j_1__ = 0; j_1__ < zetak_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "zetak" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t params_k_0_max__ = 6;
            for (size_t k_0__ = 0; k_0__ < params_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "params" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "S0";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "eps";
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__) return;
        size_t fake_I_k_0_max__ = n_fake;
        size_t fake_I_k_1_max__ = n_difeq;
        for (size_t k_1__ = 0; k_1__ < fake_I_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < fake_I_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "fake_I" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t fake_incidence_k_0_max__ = n_fake;
        for (size_t k_0__ = 0; k_0__ < fake_incidence_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "fake_incidence" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "diff_I";
        param_names__.push_back(param_name_stream__.str());
        size_t hyper_priors_k_0_max__ = 5;
        for (size_t k_0__ = 0; k_0__ < hyper_priors_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "hyper_priors" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_r0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_gamma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_tau";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_zeta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "predictive_r0";
        param_names__.push_back(param_name_stream__.str());
    }
}; // model
}  // namespace
typedef model_hierarchical_SEIR_incidence_model_namespace::model_hierarchical_SEIR_incidence_model stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
